#!/usr/bin/env python
# $Id$

__revision__ = '$Rev$'

import sys
import os.path
import itcc

subscript = {
    'catordiff':  ('ccs2.catordiff', 'cyclic alkane torsion diffrent'),
    'cmpxyztop':  ('molecule.cmpxyztop', 'compare topology of two xyz files'),
    'columnmean': ('tools.columnmean', 'mean for column'),
    'confsearch': ('ccs2.confsearch', 'conformational search'),
    'constrain':  ('tinker.constrain', 'generate a constrain tinker.key'),
    'dmddummy':   ('tools.dmddummy', 'dmddummy'),
    'dmddat2mtxyz':('tools.dmddat2mtxyz', 'convert dmddat file to mtxyz'),
    'dmddat2dmddat':('tools.dmddat2dmddat', 'convert dmddat file to dmddat'),
    'gjf2xyz':    ('tools.gjf2xyz', 'convert gjf to xyz'),
    'mol2top':    ('tools.mol2top', 'mol to top'),
    'mtxyzrg':    ('tools.mtxyzrg', 'multi tinker xyz file\'s rg'),
    'mtxyzstat':  ('tools.mtxyzstat', 'multi tinker xyz stat'),
    'onecolumn':  ('tools.onecolumn', 'change multi columns file to one colum'),
    'optimizes':  ('tinker.optimizes', 'optimizes a series of xyz files(broken)'),
    'out2arch':   ('tools.out2arch', 'gaussian out to arch file'),
    'out2ene':    ('tools.out2ene', 'gaussian out to ene'),
    'dmddat_fix': ('tools.dmddat_fix', 'fix olddmddat file'),
    'parmeval':   ('torsionfit.parmeval', 'evaluate parameter files'),
    'parmfit':    ('torsionfit.parmfit', 'parm fit'),
    'printefit':  ('torsionfit.printefit', 'print efit'),
    'removepbc':  ('molecule.removepbc', 'remove pbc'),
    'rmsd':       ('tools.rmsd', 'rmsd'),
    'scalexyz':   ('tools.scalexyz', 'scale xyz'),
    'settype':    ('tools.settype', 'change the types of xyz file'),
    'shake':      ('tools.shake', 'shake molecule'),
    'simpparam':  ('tinker.simpparam', 'simplify parameter'),
    'sumxyz':     ('tools.sumxyz', 'summary xyz file\'s info'),
    'sumparam':   ('tools.sumparam', 'choose params from tinker parameter file'),
    'tor2freeene':('tools.tor2freeene', 'torsion to free energy'),
    'xyz2gjf':    ('tools.xyz2gjf', 'xyz to gjf format'),
    'xyz2gro':    ('tools.xyz2gro', 'xyz to gro format'),
    'xyz2pdb':    ('tools.xyz2pdb', 'xyz to pdb format')
    }

def help():
    basename = os.path.basename(sys.argv[0])

    print 'Version:', itcc.__version__
    print
    print 'Sub-commands:'
    keys = subscript.items()
    keys.sort()
    for key in keys:
        print '  %s %-12s  %s' % (basename, key[0], key[1][1])

def main():
    if len(sys.argv) == 1:
        help()
        sys.exit(0)

    key = sys.argv[1]

    if key == '--version':
        print 'Version:', itcc.__version__
    elif key in ['-h', '--help', 'help']:
        help()
    elif key in subscript:
        del sys.argv[0]
        __import__('itcc.' + subscript[key][0])
        exec('itcc.' + subscript[key][0] + '.main()')
    else:
        sys.stderr.write('Unknown option: %s\n' % key)
        sys.stderr.write("Type 'itcc help' for usage.\n")
        sys.exit(1)

if __name__ == '__main__':
    main()
