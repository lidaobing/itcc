#!/usr/bin/env python
# $Id$

__revision__ = '$Rev$'

import sys
import os.path
import itcc

subscript = {
    'catordiff':  ('CCS2.catordiff', 'cyclic alkane torsion diffrent'),
    'cmpxyztop':  ('Tools.cmpxyztop', 'Compare topology of two xyz files'),
    'columnmean': ('Tools.columnmean', 'mean for column'),
    'confsearch': ('CCS2.confsearch', 'Conformational search'),
    'constrain':  ('Tinker.constrain', 'generate a constrain tinker.key'),
    'dmddummy':   ('Tools.dmddummy', 'dmddummy'),
    'dmddat2mtxyz':('Tools.dmddat2mtxyz', 'convert dmddat file to mtxyz'),
    'dmddat2xtc': ('Tools.dmddat2xtc', 'convert dmddat file to xtc'),
    'gjf2xyz':    ('Tools.gjf2xyz', 'convert gjf to xyz'),
    'mol2top':    ('Tools.mol2top', 'mol to top'),
    'mtxyzrg':    ('Tools.mtxyzrg', 'multi tinker xyz file\'s Rg'),
    'mtxyzstat':  ('Tools.mtxyzstat', 'multi tinker xyz stat'),
    'onecolumn':  ('Tools.onecolumn', 'change multi columns file to one colum'),
    'optimizes':  ('Tinker.optimizes', 'optimizes a series of xyz files(broken)'),
    'out2arch':   ('Tools.out2arch', 'Gaussian out to arch file'),
    'out2ene':    ('Tools.out2ene', 'Gaussian out to ene'),
    'dmddat_fix': ('Tools.dmddat_fix', 'fix olddmddat file'),
    'parmeval':   ('Torsionfit.parmeval', 'evaluate parameter files'),
    'parmfit':    ('Torsionfit.parmfit', 'parm fit'),
    'printefit':  ('Torsionfit.printefit', 'print efit'),
    'removepbc':  ('Molecule.removepbc', 'remove PBC'),
    'rmsd':       ('Molecule.rmsd', 'RMSD'),
    'scalexyz':   ('Tools.scalexyz', 'scale xyz'),
    'settype':    ('Tools.settype', 'Change the types of xyz file'),
    'simpparam':  ('Tinker.simpparam', 'simplify parameter'),
    'sumxyz':     ('Tools.sumxyz', 'summary xyz file\'s info'),
    'sumparam':   ('Tools.sumparam', 'choose params from tinker parameter file'),
    'tor2freeene':('Tools.tor2freeene', 'torsion to free energy'),
    'xyz2gjf':    ('Tools.xyz2gjf', 'XYZ to GJF format'),
    'xyz2gro':    ('Tools.xyz2gro', 'XYZ to GRO format'),
    }

def help():
    basename = os.path.basename(sys.argv[0])

    print 'Version:', itcc.__version__
    print
    print 'Sub-commands:'
    keys = subscript.items()
    keys.sort()
    for key in keys:
        print '  %s %-11s  %s' % (basename, key[0], key[1][1])

def main():
    if len(sys.argv) == 1:
        help()
        sys.exit(0)

    key = sys.argv[1]

    if key == '--version':
        print 'Version:', itcc.__version__
    elif key in ['-h', '--help', 'help']:
        help()
    elif key in subscript:
        del sys.argv[0]
        __import__('itcc.' + subscript[key][0])
        exec('itcc.' + subscript[key][0] + '.main()')
    else:
        sys.stderr.write('Unknown option: %s\n' % key)
        sys.stderr.write("Type 'itcc help' for usage.\n")
        sys.exit(1)

if __name__ == '__main__':
    main()
