#!/usr/bin/env python
# $Id$

import sys
import os.path
import itcc
from itcc.Molecule import rmsd, removepbc
from itcc.CCS2 import catordiff, confsearch
from itcc.Torsionfit import parmfit, parmeval
from itcc.Tinker import simpparam, constrain, optimizes
from itcc.Tools import mtxyzrg, cmpxyztop, gjf2xyz, out2arch, out2ene
from itcc.Tools import settype, sumxyz, xyz2gjf, xyz2gro, sumparam, dmddummy
from itcc.Tools import tor2freeene, scalexyz, columnmean

__revision__ = '$Rev$'

subscript = {
    'catordiff':  (catordiff.main, 'cyclic alkane torsion diffrent'),
    'cmpxyztop':  (cmpxyztop.main, 'Compare topology of two xyz files'),
    'columnmean': (columnmean.main, 'mean for column'),
    'confsearch': (confsearch.main, 'Conformational search'),
    'constrain':  (constrain.main, 'generate a constrain tinker.key'),
    'dmddummy':   (dmddummy.main, 'dmddummy'),
    'gjf2xyz':    (gjf2xyz.main, 'convert gjf to xyz'),
    'mtxyzrg':    (mtxyzrg.main, 'multi tinker xyz file\'s Rg'),
    'optimizes':  (optimizes.main, 'optimizes a series of xyz files(broken)'),
    'out2arch':   (out2arch.main, 'Gaussian out to arch file'),
    'out2ene':    (out2ene.main, 'Gaussian out to ene'),
    'parmeval':   (parmeval.main, 'evaluate parameter files'),
    'parmfit':    (parmfit.main, 'parm fit'),
    'printefit':  (parmfit.printefit, 'print efit'),
    'removepbc':  (removepbc.main, 'remove PBC'),
    'rmsd':       (rmsd.main, 'RMSD'),
    'scalexyz':   (scalexyz.main, 'scale xyz'),
    'settype':    (settype.main, 'Change the types of xyz file'),
    'simpparam':  (simpparam.main, 'simplify parameter'),
    'sumxyz':     (sumxyz.main, 'summary xyz file\'s info'),
    'sumparam':   (sumparam.main, 'choose params from tinker parameter file'),
    'tor2freeene':(tor2freeene.main, 'torsion to free energy'),
    'xyz2gjf':    (xyz2gjf.main, 'XYZ to GJF format'),
    'xyz2gro':    (xyz2gro.main, 'XYZ to GRO format'),
    }

def help():
    basename = os.path.basename(sys.argv[0])

    print 'Version:', itcc.__version__
    print
    print 'Sub-commands:'
    keys = subscript.items()
    keys.sort()
    for key in keys:
        print '  %s %-11s  %s' % (basename, key[0], key[1][1])

def main():
    if len(sys.argv) == 1:
        help()
        sys.exit(0)

    key = sys.argv[1]

    if key in subscript:
        del sys.argv[0]
        subscript[key][0]()
    else:
        help()
        sys.exit(1)

if __name__ == '__main__':
    main()
